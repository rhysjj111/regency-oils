# Generated by Django 5.2.5 on 2025-08-15 12:54

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('contact_person', models.CharField(blank=True, max_length=100)),
                ('contact_email', models.EmailField(max_length=254, unique=True)),
                ('contact_phone', models.CharField(blank=True, max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='RouteDefinition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('is_active', models.BooleanField(default=True, help_text="Inactive routes won't be offered for new runs.")),
            ],
        ),
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_number', models.CharField(max_length=10, unique=True)),
                ('nickname', models.CharField(help_text="e.g., 'Big Blue'", max_length=50)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Route',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('route_date', models.DateField()),
                ('drivers', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL)),
                ('definition', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.routedefinition')),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.vehicle')),
            ],
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address_line_1', models.CharField(max_length=255)),
                ('address_line_2', models.CharField(blank=True, max_length=255)),
                ('city', models.CharField(max_length=100)),
                ('postcode', models.CharField(max_length=10)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sites', to='core.customer')),
            ],
        ),
        migrations.CreateModel(
            name='Stop',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sequence', models.PositiveIntegerField(help_text='Planned order of the stop on the route')),
                ('is_priority', models.BooleanField(default=False, help_text='Check this to highlight the stop for the driver.')),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='PENDING', max_length=10)),
                ('failure_reason', models.CharField(blank=True, choices=[('NO_COLLECTION', 'Customer did not need a collection'), ('SHOP_CLOSED', 'Shop closed'), ('POOR_ACCESS', 'Poor access'), ('OTHER', 'Other (see notes)')], help_text='Reason for a failed stop', max_length=20)),
                ('invoice_number', models.CharField(blank=True, max_length=50)),
                ('notes', models.TextField(blank=True, help_text='Driver notes for this stop')),
                ('route', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stops', to='core.route')),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.site')),
            ],
            options={
                'ordering': ['route', 'sequence'],
            },
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('waste_oil_quantity', models.DecimalField(decimal_places=2, default=0.0, max_digits=8)),
                ('payment_made', models.DecimalField(decimal_places=2, default=0.0, max_digits=8)),
                ('fresh_oil_container_type', models.CharField(blank=True, choices=[('BOX', 'Box (20L)'), ('BARREL', 'Barrel (200L)')], max_length=10)),
                ('fresh_oil_container_qty', models.PositiveIntegerField(default=0)),
                ('fresh_oil_total_litres', models.DecimalField(decimal_places=2, default=0.0, max_digits=8)),
                ('payment_received', models.DecimalField(decimal_places=2, default=0.0, max_digits=8)),
                ('docket_number', models.CharField(blank=True, max_length=50)),
                ('docket_image', models.ImageField(blank=True, upload_to='dockets/%Y/%m/%d/')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('stop', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='collection', to='core.stop')),
            ],
        ),
    ]
